service: tlsposture

frameworkVersion: "^3.23.0"

provider:
  name: aws
  runtime: provided.al2
  region: eu-west-2

package:
  individually: true

functions:
  ssllabs:
    handler: bootstrap
    package:
      artifact: build/ssllabs.zip

stepFunctions:
  stateMachines:
    ebsslcheck:
      ${file(includes/eb-ssl-check.yml)}
    sslcheckhosts:
      role:
        Fn::GetAtt: [ "StateMachineRole", "Arn" ]
      tracingConfig:
        enabled: true
      name: TLSCheck
      definition:
        Comment: A Hello World example of the Amazon States Language using Pass states
        StartAt: Scan
        States:
          Scan:
            Type: Task
            Next: "Loop through hosts"
            Parameters:
              TableName: !Ref HostsTable
            Resource: 'arn:aws:states:::aws-sdk:dynamodb:scan'
          "Loop through hosts":
            Type: Map
            Iterator:
              StartAt: Pass
              States:
                Pass:
                  Type: Pass
                  Next: Scan URL / Check Status
                  Parameters:
                    status: START
                    host.$: $.host.S
                Scan URL / Check Status:
                  Type: Task
                  Resource: 'arn:aws:states:::lambda:invoke'
                  OutputPath: $.Payload
                  Parameters:
                    FunctionName:
                      Fn::GetAtt: [ssllabs, Arn]
                    Payload.$ : $
                  Retry:
                    - ErrorEquals:
                        - Lambda.ServiceException
                        - Lambda.AWSLambdaException
                        - Lambda.SdkClientException
                        - Lambda.TooManyRequestsException
                      IntervalSeconds: 2
                      MaxAttempts: 6
                      BackoffRate: 2
                  Next: Choice
                Choice:
                  Type: Choice
                  Choices:
                    - Not:
                        Variable: $.status
                        StringEquals: READY
                      Next: Wait for 30 seconds
                  Default: Success
                Wait for 30 seconds:
                  Type: Wait
                  Seconds: 30
                  Next: Scan URL / Check Status
                Success:
                  Type: Succeed
            End: true
            ItemsPath: $.Items
  validate: true

resources:
  Resources:
    EventBridge:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:service}-${opt:stage, 'dev'}
    HostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: host
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: host
            AttributeType: S
    StateMachineRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: statePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    Fn::GetAtt: [SsllabsLambdaFunction, Arn]
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                  Resource:
                    Fn::GetAtt: [HostsTable, Arn]


plugins:
  - serverless-better-credentials # as the first plugin
  - serverless-step-functions
